/**
 * Create bd
 */
use("db_example");

/**
 * ? Create collections
 */

let options = [
  "sucursal",
  "sucursal_automovil",
  "automovil",
  "reserva",
  "alquiler",
  "cliente",
  "registro_devolucion",
  "registro_entrega",
  "empleado"
];

for(let x = 0; x < options.length; x++) db.createCollection(options[x])

/**
 * Structure for collections
 */

use("db_example");
db.sucursal.insertOne({
    _id: 2,
    nombre: "Sucursal la minorista",
    direccion: "Calle 13",
    telefono: "45454545454"
}); 

db.automovil.insertOne({
    _id: 123,
    automovil_id: 1,
    marca: "Roll royce",
    modelo: "2020",
    Anio: "2020",
    tipo: "Deportivo",
    capacidad: "100kh",
    precio_diario: 100
});

db.sucursal_automovil.insertOne({
    _id: 3,
    sucursal_id: 2,
    automovil_id: 123,
    cantidad_disponible: 10
}); 

db.reserva.insertOne({
    _id: 1,
    ID_cliente: 1,
    ID_automovil: 123,
    fecha_Reserva: Date.now(),
    fecha_inicio: Date.now(),
    fecha_fin: Date.now() + 2400000,
    Estado: "Realizado"
})

db.cliente.insertOne({
    _id: 1,
    nombre: "juan",
    apellido: "diego",
    DNI: "12331312",
    direccion: "carrera 2303",
    telefono: "1221211221",
    email: "diegoam@gmail.com"
})

db.alquiler.insertOne({
    _id: 1,
    ID_cliente: 1,
    ID_automovil: 1,
    fecha_inicio: Date.UTC(1, 9, 1),
    fecha_fin: Date.UTC(1, 12, 1),
    costo_total: 100,
    estado: "realizado"
})

db.registro_devolucion.insertOne({
    _id: 1, 
    ID_alquiler: 1,
    ID_empleado: 1,
    fecha_devolucion: null,
    combustible_devuelto: null,
    kilomatraje_devuelto: null,
    monto_adicional: null
})

db.registro_entrega.insertOne({
    _id: 1,
    ID_alquiler: 1,
    ID_empleado: 1,
    fecha_entrega: Date.now(),
    combustible_entregado: 3.2,
    kilomatraje_entregado: 1.00 
})

db.empleado.insertOne({
    _id: 1,
    nombre: "Roberto",
    apellido: "Merlano",
    DNI: "1211212",
    direccion: "cabecera",
    telefono: "12114254",
    cargo: "Vendedor"
})
/**
 * Relations 
 */


/**
 * Consults
 */

/** 
 * Mostrar todos los clientes registrados en la base de datos.
 */ 

use("db_example");
db.cliente.find(); 

/**
 * Obtener todos los automóviles disponibles para alquiler
 */

use("db_example");
db.reserva.find({Estado: "Disponible"}); 

/**
 * Listar todos los alquileres activos junto con los datos de los
   clientes relacionados
 */

use("db_example"); 
db.cliente.aggregate([
    {
        $lookup: {
          from: "alquiler",
          localField: "_id",
          foreignField: "ID_cliente",
          as: "alquiler_cliente"
        }
    },
    {
        $project: {
            _id: 0,
            nombre: 1,
            DNI: 1,
            email: 1,
            "alquiler_cliente.estado": 1,
            "alquiler_cliente.fecha_inicio": 1,
            "alquiler_cliente.fecha_fin": 1,
            "alquiler_cliente.costo_total": 1,
        }
    },
    {
        $match: {
            "alquiler_cliente.estado": {$eq: "realizado"}
        }
    }
])

/**
 * Mostrar todas las reservas pendientes con los datos del cliente 
   y el automóvil reservado.
 */

use("db_example");
db.getCollection("reserva").aggregate([
    {
        $match: {Estado: "Realizado"}
    },
    {
        $lookup: {
          from: "cliente",
          localField: "ID_cliente",
          foreignField: "_id",
          as: "clienteR"
        }
    },
    {
        $unwind: "$clienteR"
    },

    {
        $lookup: {
            from: "automovil",
            localField: "ID_automovil",
            foreignField: "_id",
            as: "automovilR"
        }
    },
    {
        $unwind: "$automovilR"
    },
    {
        $project: {
            _id: 0,
            Estado: 1, 
            clienteR: {nombre: 1, apellido: 1, email: 1},
            automovilR: {Anio: 1, modelo: 1, marca: 1}
        }
    }
])


/**
 * Obtener los detalles del alquiler con el ID_Alquiler específico.
 */

use("db_example");
db.alquiler.aggregate([
    {
        $match: {_id: 1} // * Id especifico
    },
    {
        $project: {
            _id: 0,
            fecha_inicio: 1, 
            fecha_fin: 1,
            estado: 1,
            costo_total: 1
        }
    }
])

/**
 * Listar los empleados con el cargo Vendedor
 */

use("db_example");
db.empleado.aggregate([
    {
        $match: {cargo: "Vendedor"} // * Cargo para filtrado
    },
    {
        $project: {
            _id: 0,
            nombre: 1,
            apellido: 1,
            telefono: 1,
            cargo: 1
        }
    }
])


/**
 * Mostrar la cantidad total de automóviles disponibles en cada 
   sucursal.
 */
use("db_example");

   db.sucursal.aggregate([
        {
            $lookup: {
              from: "sucursal_automovil",
              localField: "_id",
              foreignField: "sucursal_id",
              as: "sucursal"
            }
        },
        {
            $unwind: "$sucursal"
        },
        {
            $group: {
                _id: "$nombre",
                Cantidad: {$sum: "$sucursal.cantidad_disponible"}
            }
        }
]);

/**
 * Obtener el costo total de un alquiler específico.
 */
use("db_example")
db.alquiler.aggregate([
    {
        $match: {_id: 1} // * ID especifico
    },
    {
        $lookup: {
          from: "cliente",
          localField: "ID_cliente",
          foreignField: "_id",
          as: "clienteR"
        }
    },
    {
        $lookup:{
            from: "automovil",
            localField: "ID_automovil",
            foreignField: "_id",
            as: "automovilR"
        }
    },
    {
        $unwind: "$clienteR"
    },
    {
        $project: {
            _id: 0,
            costo_total: 1,
            estado: 1,
            clienteR: {nombre: 1, apellido: 1},
        }
    }
])  


/**
 * Listar los clientes con el DNI específico.
 */

use("db_example")
db.cliente.find({DNI: "12331312"}) /** DNI especifico */