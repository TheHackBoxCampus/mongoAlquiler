/**
 * Create bd
 */
use("alquilerdb");

/**
 * ? Create collections
 */

let options = [
  "sucursal",
  "sucursal_automovil",
  "automovil",
  "reserva",
  "alquiler",
  "cliente",
  "registro_devolucion",
  "registro_entrega",
  "empleado",
];

for (let x = 0; x < options.length; x++) db.createCollection(options[x]);

/**
 * Structure for collections
 */

use("alquilerdb");
db.sucursal.insertOne({
  _id: 2,
  nombre: "Sucursal la minorista",
  direccion: "Calle 13",
  telefono: "45454545454",
});

db.automovil.insertOne({
  _id: 123,
  automovil_id: 1,
  marca: "Roll royce",
  modelo: "2020",
  Anio: "2020",
  tipo: "Deportivo",
  capacidad: 10,
  precio_diario: 100,
});
db.automovil.insertOne({
  _id: 124,
  automovil_id: 2,
  marca: "lambo",
  modelo: "2020",
  Anio: "2020",
  tipo: "Deportivo",
  capacidad: 2,
  precio_diario: 300,
});

db.automovil.insertOne({
  _id: 125,
  automovil_id: 3,
  marca: "BMW",
  modelo: "2019",
  Anio: "2019",
  tipo: "Deportivo",
  capacidad: 7,
  precio_diario: 200,
});

db.sucursal_automovil.insertOne({
  _id: 3,
  sucursal_id: 2,
  automovil_id: 123,
  cantidad_disponible: 10,
});

db.reserva.insertOne({
  _id: 1,
  ID_cliente: 1,
  ID_automovil: 123,
  fecha_Reserva: Date.now(),
  fecha_inicio: Date.now(),
  fecha_fin: Date.now() + 2400000,
  Estado: "Realizado",
});

db.cliente.insertOne({
  _id: 1,
  nombre: "juan",
  apellido: "diego",
  DNI: "12331312",
  direccion: "carrera 2303",
  telefono: "1221211221",
  email: "diegoam@gmail.com",
});

db.cliente.insertOne({
    _id: 2,
    nombre: "Romeo",
    apellido: "marin",
    DNI: "9959555",
    direccion: "piedecuesta",
    telefono: "1221211221",
    email: "RomeoaS@gmail.com",
});

db.alquiler.insertOne({
  _id: 1,
  ID_cliente: 1,
  ID_automovil: 1,
  fecha_inicio: Date.UTC(1, 9, 1),
  fecha_fin: Date.UTC(1, 12, 1),
  costo_total: 100,
  estado: "realizado",
});

db.alquiler.insertOne({
    _id: 2,
    ID_cliente: 2,
    ID_automovil: 124,
    fecha_inicio: Date.UTC(1, 9, 1),
    fecha_fin: Date.UTC(1, 12, 1),
    costo_total: 100,
    estado: "pendiente",
});

db.alquiler.insertOne({
    _id: 3,
    ID_cliente: 2,
    ID_automovil: 123,
    fecha_inicio: Date.UTC(1, 9, 1),
    fecha_fin: Date.UTC(1, 12, 1),
    costo_total: 100,
    estado: "realizado",
});

db.alquiler.insertOne({
    _id: 4,
    ID_cliente: 2,
    ID_automovil: 125,
    fecha_inicio: ISODate("2023-07-05"),
    fecha_fin: Date.UTC(1, 12, 1),
    costo_total: 100,
    estado: "pendiente",
});

db.registro_devolucion.insertOne({
  _id: 1,
  ID_alquiler: 1,
  ID_empleado: 1,
  fecha_devolucion: null,
  combustible_devuelto: null,
  kilomatraje_devuelto: null,
  monto_adicional: null,
});

db.registro_entrega.insertOne({
  _id: 1,
  ID_alquiler: 1,
  ID_empleado: 1,
  fecha_entrega: Date.now(),
  combustible_entregado: 3.2,
  kilomatraje_entregado: 1.0,
});

db.empleado.insertOne({
  _id: 1,
  nombre: "Roberto",
  apellido: "Merlano",
  DNI: "1211212",
  direccion: "cabecera",
  telefono: "12114254",
  cargo: "Vendedor",
});

/**
 * Consults
 */

/**
 * Mostrar todos los clientes registrados en la base de datos.
 */

use("alquilerdb");
db.cliente.find();

/**
 * Obtener todos los automóviles disponibles para alquiler
 */
use("alquilerdb");
db.reserva.find({ Estado: "Disponible" });

/**
 * Listar todos los alquileres activos junto con los datos de los
   clientes relacionados
 */
use("alquilerdb");
db.cliente.aggregate([
  {
    $lookup: {
      from: "alquiler",
      localField: "_id",
      foreignField: "ID_cliente",
      as: "alquiler_cliente",
    },
  },
  {
    $project: {
      _id: 0,
      nombre: 1,
      DNI: 1,
      email: 1,
      "alquiler_cliente.estado": 1,
      "alquiler_cliente.fecha_inicio": 1,
      "alquiler_cliente.fecha_fin": 1,
      "alquiler_cliente.costo_total": 1,
    },
  },
  {
    $match: {
      "alquiler_cliente.estado": { $eq: "realizado" },
    },
  },
]);

/**
 * Mostrar todas las reservas pendientes con los datos del cliente 
   y el automóvil reservado.
 */

use("alquilerdb");
db.getCollection("reserva").aggregate([
  {
    $match: { Estado: "pendiente" }, // * <- Estado pendiente
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_cliente",
      foreignField: "_id",
      as: "clienteR",
    },
  },
  {
    $unwind: "$clienteR",
  },

  {
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "automovilR",
    },
  },
  {
    $unwind: "$automovilR",
  },
  {
    $project: {
      _id: 0,
      Estado: 1,
      clienteR: { nombre: 1, apellido: 1, email: 1 },
      automovilR: { Anio: 1, modelo: 1, marca: 1 },
    },
  },
]);

/**
 * Obtener los detalles del alquiler con el ID_Alquiler específico.
 */

use("alquilerdb");
db.alquiler.aggregate([
  {
    $match: { _id: 1 }, // * Id especifico
  },
  {
    $project: {
      _id: 0,
      fecha_inicio: 1,
      fecha_fin: 1,
      estado: 1,
      costo_total: 1,
    },
  },
]);

/**
 * Listar los empleados con el cargo Vendedor
 */
use("alquilerdb");
db.empleado.aggregate([
  {
    $match: { cargo: "Vendedor" }, // * Cargo para filtrado
  },
  {
    $project: {
      _id: 0,
      nombre: 1,
      apellido: 1,
      telefono: 1,
      cargo: 1,
    },
  },
]);

/**
 * Mostrar la cantidad total de automóviles "disponibles" en cada 
   sucursal.
 */
use("alquilerdb");
db.sucursal.aggregate([
  {
    $lookup: {
      from: "sucursal_automovil",
      localField: "_id",
      foreignField: "sucursal_id",
      as: "sucursal",
    },
  },
  {
    $unwind: "$sucursal",
  },
  {
    $group: {
      _id: "$nombre",
      Cantidad: { $sum: "$sucursal.cantidad_disponible" },
    },
  },
]);

/**
 * Obtener el costo total de un alquiler específico.
 */
use("alquilerdb");
db.alquiler.aggregate([
  {
    $match: { _id: 1 }, // * ID especifico
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_cliente",
      foreignField: "_id",
      as: "clienteR",
    },
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "automovilR",
    },
  },
  {
    $unwind: "$clienteR",
  },
  {
    $project: {
      _id: 0,
      costo_total: 1,
      estado: 1,
      clienteR: { nombre: 1, apellido: 1 },
    },
  },
]);

/**
 * Listar los clientes con el DNI específico.
 */

use("alquilerdb");
db.cliente.find({ DNI: "12331312" }); /** DNI especifico */

/**
 * Mostrar todos los automóviles con una capacidad mayor a 5
    personas.
 */
use("alquilerdb");
db.automovil.find({ capacidad: { $gt: 5 } });

/** 
 * Obtener los detalles del alquiler que tiene fecha de inicio en
   2023-07-05. 
 */

use("alquilerdb");
db.alquiler.find({ fecha_inicio: { $eq: "2023-07-05" } });

/**
 * Listar las reservas pendientes realizadas por un cliente
   específico.
 */
use("alquilerdb");
db.reserva.aggregate([
  {
    $lookup: {
      from: "cliente",
      localField: "ID_cliente",
      foreignField: "_id",
      as: "cliente_r",
    },
  },
  {
    $unwind: "$cliente_r",
  },
  {
    $project: {
      Estado: 1,
      fecha_inicio: 1,
      cliente_r: { nombre: 1, apellido: 1, DNI: 1 },
    },
  },
  {
    $match: {
      "cliente_r.nombre": "juan", // cliente especifico
      Estado: "Realizado",
    },
  },
]);

/**
 * Mostrar los empleados con cargo de "Gerente" o "Asistente".
 */

use("alquilerdb");
db.empleado.find({
  $or: [{ cargo: "Asistente" }, { cargo: "Gerente" }],
});

/**
 * Obtener los datos de los clientes que realizaron al menos un
 * alquiler.
 */

use("alquilerdb");
db.alquiler.aggregate([
  {
    $lookup: {
      from: "cliente",
      localField: "ID_cliente",
      foreignField: "_id",
      as: "alquileres",
    },
  },
  {
    $unwind: "$alquileres"
  },
  {
    $group: {
        _id: "$alquileres.nombre",
        cantidad_alquiler: {$sum: 1}
    }
  },
  {
    $match: {
        cantidad_alquiler: {$exists: true, $not: {$size: 0}}      
    }
  },
]);

/**
 * Listar todos los automóviles ordenados por marca y modelo.
 */

use("alquilerdb");
db.automovil.find().sort(
  {
    marca: 1,
  },
  {
    modelo: 1,
  }
);

// ----------------------------------------------------------------------

/**
 * Mostrar la cantidad total de automóviles en cada sucursal junto
   con su dirección.
 */ 
use("alquilerdb");
db.sucursal.aggregate([
    {
        $lookup: {
            from: "sucursal_automovil",
            localField: "_id",
            foreignField: "sucursal_id",
            as: "sucursales"
        }
    },
    {
        $unwind: "$sucursales"
    },
    {
        $group: {
          _id: {
            sucursal_id: "$_id",
            nombre: "$nombre",
            direccion: "$direccion"
          },
          cantidad_automoviles: { $sum: "$sucursales.cantidad_disponible"}
        }
    },
    {
        $project: {
            cantidad_automoviles: 1,
        }
    }
])

// ----------------------------------------------------------------------

/**
 * Obtener la cantidad total de alquileres registrados en la base de
   datos.
 */

use("alquilerdb");
db.alquiler.aggregate([
    {
        $group: {
            _id: null,
            total_alquileres: {$sum: 1}
        }
    },
    {
        $project: {
            _id: 0,
            total_alquileres: 1
        }
    }   
]); 

// ----------------------------------------------------------------------


/**
 * Mostrar los automóviles con capacidad igual a 5 personas y que
   estén disponibles.
 */


use("alquilerdb");
db.automovil.aggregate([
    {
        $match: {
            capacidad: {$eq: 5}     
        }
    }
])

/*
  ? Campo inexistente 
  ! Error de cohesion en la consulta debido a que en las tablas no se encuentra
  ! ningun estado para verificar si un automovil esta disponible o no.

  * Por ende la consulta quedo con filtrado de datos donde la capacidad sea igual a 
  * 5 personas
 */

// ----------------------------------------------------------------------
  /**
   * 20.Obtener los datos del cliente que realizó la reserva con
   */

  /**
   * La consulta esta mal formulada, debido a falta de informacion
   */

// ----------------------------------------------------------------------
// * Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'.

use("alquilerdb");
db.alquiler.aggregate([
    {
        $match: {
            fecha_inicio: {
                $gte:ISODate('2023-07-05'),
                $lt: ISODate('2023-07-10')
            }
        }
    },
    {
        $project: {
            _id: 0,
            fecha_inicio: 1,
            fecha_fin: 1,
            costo_total: 1,
            estado: 1
        }
    }
])